version: 2.1

executors:
  android_executor:
    docker:
      - image: cimg/android:2024.07
    environment:
      _JAVA_OPTIONS: "-Xms1g -Xmx2g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    working_directory: ~/project

commands:
  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
            - gradle-cache-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }} # Add other build.gradle files if you have more modules
            - gradle-cache-

  save_gradle_cache:
    steps:
      - save_cache:
          paths:
            - ~/.gradle/caches
            - ~/.gradle/wrapper
          key: gradle-cache-{{ checksum "build.gradle.kts" }}-{{ checksum "app/build.gradle.kts" }} # Match the restore key

  run_ui_tests:
    steps:
      - run:
          name: Create and run emulator
          command: |
            set -x
            # List available system images
            sdkmanager --list | grep system-images
            # Create an AVD
            echo "no" | avdmanager create avd -n test_avd -k "system-images;android-30;google_apis;x86_64" --force
            # Start emulator in background
            $ANDROID_HOME/emulator/emulator -avd test_avd -no-audio -no-window -gpu swiftshader_indirect -no-snapshot -wipe-data &
            # Wait for emulator to boot
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;'
            # Unlock screen
            adb shell input keyevent 82
            # Disable animations
            adb shell settings put global window_animation_scale 0.0
            adb shell settings put global transition_animation_scale 0.0
            adb shell settings put global animator_duration_scale 0.0
            # Verify emulator is running
            adb devices
            echo "Emulator started"
      - run:
          name: Run UI Tests
          command: ./gradlew connectedCheck
      - store_artifacts:
          path: app/build/reports/androidTests/connected/
          destination: ui-test-reports/
      - store_test_results:
          path: app/build/outputs/androidTest-results/connected/

jobs:
  build_android:
    executor: android_executor
    steps:
      - checkout

      - run:
          name: Set Execute Permissions for gradlew
          command: chmod +x ./gradlew

      - restore_gradle_cache

      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies

      - save_gradle_cache

      - run:
          name: Code Check
          command: ./gradlew detekt ktlintCheck

      - run:
          name: Run Build
          command: ./gradlew assembleDebug

      - store_artifacts:
          path: app/build/outputs/apk/debug/
          destination: apks/

  ui_tests_on_emulator:
    executor: android_executor
    steps:
      - checkout

      - run:
          name: Set Execute Permissions for gradlew
          command: chmod +x ./gradlew

      - restore_gradle_cache

      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies

      # Building the app and test APK is necessary before running UI tests
      - run:
          name: Build App and Test APK
          command: ./gradlew assembleDebug assembleDebugAndroidTest

      - run_ui_tests

      # No need to save cache here as it's primarily for build dependencies
      # and UI tests might not significantly change the cache in a way that benefits subsequent builds.

workflows:
  version: 2
  build_workflow:
    jobs:
      - build_android:
          filters:
            branches:
              only:
                - main
                - develop
      - ui_tests_on_emulator:
          requires:
            - build_android # Ensure build completes before running UI tests
          filters:
            branches:
              only:
                - main # Or specify branches where UI tests should run